# Generated by Django 5.0.6 on 2025-01-08 12:42

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('main', '0013_alter_groundstation_table_alter_satellitepass_table_and_more'),
    ]

    operations = [
        migrations.CreateModel(
            name='TelemetryModel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(help_text='Time of the telemetry data recording')),
                ('latitude', models.FloatField(help_text='Latitude of the satellite position in degrees')),
                ('longitude', models.FloatField(help_text='Longitude of the satellite position in degrees')),
                ('altitude', models.FloatField(help_text='Altitude of the satellite above Earth in kilometers')),
                ('velocity', models.FloatField(help_text='Velocity of the satellite in kilometers per second')),
                ('health_status', models.CharField(choices=[('Nominal', 'Nominal'), ('Warning', 'Warning'), ('Critical', 'Critical')], default='Nominal', help_text='Health status of the satellite', max_length=20)),
                ('battery_voltage', models.FloatField(blank=True, help_text='Battery voltage in volts', null=True)),
                ('solar_panel_status', models.BooleanField(default=True, help_text='Whether the solar panel is operational')),
                ('temperature', models.FloatField(blank=True, help_text='Internal temperature of the satellite in Celsius', null=True)),
                ('signal_strength', models.FloatField(blank=True, help_text='Signal strength in dBm', null=True)),
                ('pitch', models.FloatField(blank=True, help_text='Pitch angle of the satellite in degrees', null=True)),
                ('yaw', models.FloatField(blank=True, help_text='Yaw angle of the satellite in degrees', null=True)),
                ('roll', models.FloatField(blank=True, help_text='Roll angle of the satellite in degrees', null=True)),
                ('power_consumption', models.FloatField(blank=True, help_text='Power consumption in watts', null=True)),
                ('data_rate', models.FloatField(blank=True, help_text='Data transfer rate in Mbps', null=True)),
                ('error_code', models.CharField(blank=True, help_text='Error code or anomaly detected', max_length=50, null=True)),
                ('command_status', models.CharField(choices=[('Idle', 'Idle'), ('Executing', 'Executing'), ('Completed', 'Completed'), ('Failed', 'Failed')], default='Idle', help_text='Status of command execution', max_length=20)),
                ('additional_data', models.JSONField(blank=True, help_text='Additional telemetry data in JSON format for extensibility', null=True)),
                ('satellite', models.ForeignKey(help_text='Reference to the satellite this telemetry data belongs to', on_delete=django.db.models.deletion.CASCADE, related_name='telemetry_data', to='main.satellitetle')),
            ],
            options={
                'verbose_name': 'Telemetry Data',
                'verbose_name_plural': 'Telemetry Data',
                'ordering': ['-timestamp'],
                'indexes': [models.Index(fields=['timestamp'], name='main_teleme_timesta_598313_idx'), models.Index(fields=['satellite'], name='main_teleme_satelli_bd3f8a_idx')],
            },
        ),
    ]
