# Generated by Django 5.0.6 on 2025-01-15 12:29

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="GroundStation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        help_text="Unique name of the ground station",
                        max_length=100,
                        unique=True,
                    ),
                ),
                (
                    "latitude",
                    models.DecimalField(
                        decimal_places=6,
                        help_text="Latitude of the ground station in decimal degrees",
                        max_digits=9,
                    ),
                ),
                (
                    "longitude",
                    models.DecimalField(
                        decimal_places=6,
                        help_text="Longitude of the ground station in decimal degrees",
                        max_digits=9,
                    ),
                ),
                (
                    "altitude",
                    models.FloatField(
                        help_text="Altitude of the ground station in meters above sea level"
                    ),
                ),
                (
                    "start_tracking_elevation",
                    models.FloatField(
                        default=10.0,
                        help_text="Minimum elevation angle (in degrees) above horizon to start tracking",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Indicates if the ground station is active",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time the ground station was added",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Date and time the ground station was last updated",
                    ),
                ),
            ],
            options={
                "verbose_name": "Ground Station",
                "verbose_name_plural": "Ground Stations",
                "db_table": "Ground Station",
                "unique_together": {("name", "latitude", "longitude")},
            },
        ),
        migrations.CreateModel(
            name="SatellitePass",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("satellite_name", models.CharField(max_length=255)),
                ("rise_pass_time", models.DateTimeField(blank=True, null=True)),
                ("set_pass_time", models.DateTimeField()),
                ("max_elevation", models.FloatField()),
                ("azimuth", models.FloatField()),
                ("distance", models.FloatField()),
                ("created_at", models.DateTimeField(auto_now_add=True)),
            ],
            options={
                "db_table": "Satellite Passes",
                "unique_together": {
                    ("satellite_name", "rise_pass_time", "set_pass_time")
                },
            },
        ),
        migrations.CreateModel(
            name="SatelliteTLE",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100, unique=True)),
                ("line1", models.CharField(blank=True, max_length=70, null=True)),
                ("line2", models.CharField(blank=True, max_length=70, null=True)),
                ("last_updated", models.DateTimeField(auto_now=True)),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                (
                    "auto_tracking",
                    models.BooleanField(
                        default=False,
                        help_text="Whether auto-tracking is enabled for this satellite.",
                    ),
                ),
                (
                    "orbit_status",
                    models.CharField(
                        choices=[
                            ("orbiting", "Orbiting"),
                            ("de-orbited", "De-orbited"),
                        ],
                        default="orbiting",
                        help_text="The orbit status of the satellite.",
                        max_length=20,
                    ),
                ),
                (
                    "tle_group",
                    models.CharField(
                        choices=[
                            ("active", "Active Satellites"),
                            ("analyst", "Analyst Satellites"),
                            ("cubesat", "CubeSats"),
                            ("debris", "Debris"),
                            ("education", "Education"),
                            ("engineering", "Engineering"),
                            ("earthobs", "Earth Observation"),
                            ("galileo", "Galileo"),
                            ("geo", "Geostationary"),
                            ("glo-ops", "GLONASS Operational"),
                            ("glo-all", "GLONASS All"),
                            ("gps-ops", "GPS Operational"),
                            ("gps-all", "GPS All"),
                            ("geo-protected", "Geostationary Protected Region"),
                            ("geo-unregistered", "Geostationary Unregistered"),
                            ("intelsat", "Intelsat Satellites"),
                            ("iridium", "Iridium Satellites"),
                            ("military", "Military Satellites"),
                            ("other", "Other Satellites"),
                            ("planet", "Planet Satellites"),
                            ("science", "Science Satellites"),
                            ("stations", "Stations"),
                            ("starlink", "Starlink"),
                            ("tdrss", "TDRSS"),
                            ("weather", "Weather Satellites"),
                        ],
                        default="weather",
                        help_text="The TLE group from CelesTrak used for updating TLE data.",
                        max_length=20,
                    ),
                ),
            ],
            options={
                "db_table": "Satellites",
                "unique_together": {("name", "line1", "line2")},
            },
        ),
        migrations.CreateModel(
            name="TelemetryModel",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "timestamp",
                    models.DateTimeField(
                        help_text="Time of the telemetry data recording"
                    ),
                ),
                (
                    "latitude",
                    models.FloatField(
                        help_text="Latitude of the satellite position in degrees"
                    ),
                ),
                (
                    "longitude",
                    models.FloatField(
                        help_text="Longitude of the satellite position in degrees"
                    ),
                ),
                (
                    "altitude",
                    models.FloatField(
                        help_text="Altitude of the satellite above Earth in kilometers"
                    ),
                ),
                (
                    "velocity",
                    models.FloatField(
                        help_text="Velocity of the satellite in kilometers per second"
                    ),
                ),
                (
                    "health_status",
                    models.CharField(
                        choices=[
                            ("Nominal", "Nominal"),
                            ("Warning", "Warning"),
                            ("Critical", "Critical"),
                        ],
                        default="Nominal",
                        help_text="Health status of the satellite",
                        max_length=20,
                    ),
                ),
                (
                    "battery_voltage",
                    models.FloatField(
                        blank=True, help_text="Battery voltage in volts", null=True
                    ),
                ),
                (
                    "solar_panel_status",
                    models.BooleanField(
                        default=True, help_text="Whether the solar panel is operational"
                    ),
                ),
                (
                    "temperature",
                    models.FloatField(
                        blank=True,
                        help_text="Internal temperature of the satellite in Celsius",
                        null=True,
                    ),
                ),
                (
                    "signal_strength",
                    models.FloatField(
                        blank=True, help_text="Signal strength in dBm", null=True
                    ),
                ),
                (
                    "pitch",
                    models.FloatField(
                        blank=True,
                        help_text="Pitch angle of the satellite in degrees",
                        null=True,
                    ),
                ),
                (
                    "yaw",
                    models.FloatField(
                        blank=True,
                        help_text="Yaw angle of the satellite in degrees",
                        null=True,
                    ),
                ),
                (
                    "roll",
                    models.FloatField(
                        blank=True,
                        help_text="Roll angle of the satellite in degrees",
                        null=True,
                    ),
                ),
                (
                    "power_consumption",
                    models.FloatField(
                        blank=True, help_text="Power consumption in watts", null=True
                    ),
                ),
                (
                    "data_rate",
                    models.FloatField(
                        blank=True, help_text="Data transfer rate in Mbps", null=True
                    ),
                ),
                (
                    "error_code",
                    models.CharField(
                        blank=True,
                        help_text="Error code or anomaly detected",
                        max_length=50,
                        null=True,
                    ),
                ),
                (
                    "command_status",
                    models.CharField(
                        choices=[
                            ("Idle", "Idle"),
                            ("Executing", "Executing"),
                            ("Completed", "Completed"),
                            ("Failed", "Failed"),
                        ],
                        default="Idle",
                        help_text="Status of command execution",
                        max_length=20,
                    ),
                ),
                (
                    "additional_data",
                    models.JSONField(
                        blank=True,
                        help_text="Additional telemetry data in JSON format for extensibility",
                        null=True,
                    ),
                ),
                (
                    "satellite",
                    models.ForeignKey(
                        help_text="Reference to the satellite this telemetry data belongs to",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="telemetry_data",
                        to="main.satellitetle",
                    ),
                ),
            ],
            options={
                "verbose_name": "Telemetry Data",
                "verbose_name_plural": "Telemetry Data",
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(
                        fields=["timestamp"], name="main_teleme_timesta_598313_idx"
                    ),
                    models.Index(
                        fields=["satellite"], name="main_teleme_satelli_bd3f8a_idx"
                    ),
                ],
            },
        ),
    ]
